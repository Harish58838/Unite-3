def median_of_medians(arr, k):
    def partition(arr, l, r, pivot_idx):
        pivot_value = arr[pivot_idx]
        arr[pivot_idx], arr[r] = arr[r], arr[pivot_idx]
        store_idx = l
        for i in range(l, r):
            if arr[i] < pivot_value:
                arr[store_idx], arr[i] = arr[i], arr[store_idx]
                store_idx += 1
        arr[r], arr[store_idx] = arr[store_idx], arr[r]
        return store_idx

    def select(arr, l, r, k):
        if l == r:
            return arr[l]
        pivot_idx = l
        while True:
            pivot_idx = partition(arr, l, r, pivot_idx)
            if pivot_idx == k:
                return arr[k]
            elif k < pivot_idx:
                r = pivot_idx - 1
            else:
                l = pivot_idx + 1

    n = len(arr)
    groups = [arr[i:i + 5] for i in range(0, n, 5)]
    medians = [sorted(group)[len(group) // 2] for group in groups]
    if len(medians) <= 5:
        pivot = sorted(medians)[len(medians) // 2]
    else:
        pivot = median_of_medians(medians, len(medians) // 2)

    pivot_idx = arr.index(pivot)
    arr[pivot_idx], arr[n - 1] = arr[n - 1], arr[pivot_idx]
    idx = select(arr, 0, n - 1, k - 1)
    return idx

# Test Cases
arr1 = [12, 3, 5, 7, 19]
k1 = 2
print(median_of_medians(arr1, k1))  # Expected Output: 5

arr2 = [12, 3, 5, 7, 4, 19, 26]
k2 = 3
print(median_of_medians(arr2, k2))  # Expected Output: 5

arr3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k3 = 6
print(median_of_medians(arr3, k3))  # Expected Output: 6
