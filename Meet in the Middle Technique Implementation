from itertools import chain, combinations

def subsets(arr):
    return chain(*[combinations(arr, i) for i in range(len(arr)+1)])

def closest_sum_subset(arr, target):
    n = len(arr)
    half = n // 2
    left_half = list(subsets(arr[:half]))
    right_half = list(subsets(arr[half:]))
    
    left_half_sums = [sum(subset) for subset in left_half]
    right_half_sums = [sum(subset) for subset in right_half]
    
    right_half_sums.sort()
    
    closest_sum = float('inf')
    closest_subset = None
    
    for sum_l in left_half_sums:
        idx = bisect_left(right_half_sums, target - sum_l)
        
        if idx < len(right_half_sums):
            sum_r = right_half_sums[idx]
            if abs(target - (sum_l + sum_r)) < abs(target - closest_sum):
                closest_sum = sum_l + sum_r
                closest_subset = (sum_l, sum_r)
    
    return closest_subset

# Example 1
set1 = [45, 34, 4, 12, 5, 2]
target_sum1 = 42
print(closest_sum_subset(set1, target_sum1))

# Example 2
set2 = [1, 3, 2, 7, 4, 6]
target_sum2 = 10
print(closest_sum_subset(set2, target_sum2))
